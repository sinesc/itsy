//! AST datastructures generated by the parser and processed by the resolver.

use std::{fmt::{self, Debug}, collections::HashMap, cell::Cell};
use crate::util::{BindingId, FunctionId, ScopeId, Numeric, FnKind, TypeId, HeapRef};

/// BindingId handling for bindable AST structures.
pub(crate) trait Bindable {
    /// Returns a mutable reference to the binding_id.
    fn binding_id_mut(self: &mut Self) -> &mut Option<BindingId>;
    /// Returns the binding_id.
    fn binding_id(self: &Self) -> Option<BindingId>;
    /// Sets the binding_id or panics if it is already set.
    fn set_binding_id(self: &mut Self, binding_id: BindingId) {
        let current_binding_id = self.binding_id_mut();
        if current_binding_id.is_none() {
            *current_binding_id = Some(binding_id);
        } else {
            panic!("attempted to reassign binding_id");
        }
    }
}

/// Implements the Bindable trait for given structure.
macro_rules! impl_bindable {
    ($struct_name:ident) => {
        impl<'a> Bindable for $struct_name<'a> {
            fn binding_id_mut(self: &mut Self) -> &mut Option<BindingId> {
                &mut self.binding_id
            }
            fn binding_id(self: &Self) -> Option<BindingId> {
                self.binding_id
            }
        }
    };
}

/// Source code position handling for AST structures associated with a position.
pub(crate) trait Positioned {
    /// Returns the structure's position.
    fn position(self: &Self) -> u32;
}

/// Implements the Position trait for given structure.
macro_rules! impl_positioned {
    ($struct_name:ident) => {
        impl<'a> Positioned for $struct_name<'a> {
            fn position(self: &Self) -> u32 {
                self.position
            }
        }
    };
}

/// Provides information whether this AST structure causes an unconditional function return.
pub(crate) trait Returns {
    /// Returns true if this structure unconditionally causes the parent function to return.
    fn returns(self: &Self) -> bool;
}
/*
/// Implements the Returns trait for given structure.
macro_rules! impl_no_return {
    ($struct_name:ident) => {
        impl<'a> Returns for $struct_name<'a> {
            fn returns(self: &Self) -> bool {
                false
            }
        }
    };
}
*/
#[derive(Debug)]
pub struct Ident<'a> {
    pub position: u32,
    pub name: &'a str,
}
impl_positioned!(Ident);

#[derive(Debug)]
pub struct Path<'a> {
    pub position: u32,
    pub name: Vec<&'a str>,
}

impl<'a> Path<'a> {
    pub fn pop(self: &mut Self) -> &'a str {
        self.name.pop().unwrap()
    }
}

impl_positioned!(Path);

pub enum Statement<'a> {
    Binding(Binding<'a>),
    Function(Function<'a>),
    Structure(Struct<'a>),
    ForLoop(ForLoop<'a>),
    WhileLoop(WhileLoop<'a>),
    IfBlock(IfBlock<'a>),
    Block(Block<'a>),
    Return(Return<'a>),
    Expression(Expression<'a>),
}

impl<'a> Statement<'a> {
    /// Returns whether the statement could also be an expression. Notably, an expression could not be since Statement::Expression is ; terminated
    pub fn is_expressable(self: &Self) -> bool {
        match self {
            Statement::IfBlock(_) | Statement::Block(_) => true,
            _ => false,
        }
    }
    /// Converts the statement into an expression or panics if the conversion would be invalid.
    pub fn into_expression(self: Self) -> Expression<'a> {
        match self {
            Statement::IfBlock(if_block)        => Expression::IfBlock(Box::new(if_block)),
            Statement::Block(block)             => Expression::Block(Box::new(block)),
            Statement::Expression(expression)   => expression,
            Statement::Return(ret)              => ret.expr.unwrap(),
            _                                   => panic!("invalid statement to expression conversion"),
        }
    }
}

impl<'a> Returns for Statement<'a> {
    fn returns(self: &Self) -> bool {
        match self {
            Statement::Return(_)    => true,
            Statement::IfBlock(v)   => v.returns(),
            Statement::Block(v)     => v.returns(),
            Statement::Expression(v)=> v.returns(),
            _                       => false,
        }
    }
}

impl<'a> Positioned for Statement<'a> {
    fn position(self: &Self) -> u32 {
        match self {
            Statement::Binding(v)   => v.position(),
            Statement::Function(v)  => v.position(),
            Statement::Structure(v) => v.position(),
            Statement::ForLoop(v)   => v.position(),
            Statement::WhileLoop(v) => v.position(),
            Statement::IfBlock(v)   => v.position(),
            Statement::Block(v)     => v.position(),
            Statement::Return(v)    => v.position(),
            Statement::Expression(v)=> v.position(),
        }
    }
}

impl<'a> Debug for Statement<'a> {
    fn fmt(self: &Self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Statement::Binding(v)   => write!(f, "{:#?}", v),
            Statement::Function(v)  => write!(f, "{:#?}", v),
            Statement::Structure(v) => write!(f, "{:#?}", v),
            Statement::ForLoop(v)   => write!(f, "{:#?}", v),
            Statement::WhileLoop(v) => write!(f, "{:#?}", v),
            Statement::IfBlock(v)   => write!(f, "{:#?}", v),
            Statement::Block(v)     => write!(f, "{:#?}", v),
            Statement::Return(v)    => write!(f, "{:#?}", v),
            Statement::Expression(v)=> write!(f, "Statement{:#?}", v),
        }
    }
}

#[derive(Debug)]
pub struct Binding<'a> {
    pub position    : u32,
    pub ident       : Ident<'a>,
    pub mutable     : bool,
    pub expr        : Option<Expression<'a>>,
    pub ty          : Option<InlineType<'a>>,
    pub binding_id  : Option<BindingId>,
}
impl_bindable!(Binding);
impl_positioned!(Binding);

#[derive(Debug)]
pub struct Function<'a> {
    pub position    : u32,
    pub sig         : Signature<'a>,
    pub block       : Block<'a>,
    pub function_id : Option<FunctionId>,
    pub scope_id    : Option<ScopeId>,
}
impl_positioned!(Function);

#[derive(Debug)]
pub struct Signature<'a> {
    pub ident   : Ident<'a>,
    pub args    : Vec<Binding<'a>>,
    pub ret     : Option<TypeName<'a>>,
}

impl<'a> Signature<'a> {
    pub fn ret_resolved(self: &Self) -> bool {
        self.ret.as_ref().map_or(true, |ret| ret.type_id.is_some())
    }
    pub fn ret_type_id(self: &Self) -> Option<TypeId> {
        self.ret.as_ref().map_or(Some(TypeId::void()), |ret| ret.type_id)
    }
    pub fn args_resolved(self: &Self) -> bool {
        self.args.iter().fold(true, |acc, arg| acc && arg.ty.as_ref().map_or(false, |type_name| type_name.type_id().is_some()))
    }
    pub fn arg_type_ids(self: &Self) -> Vec<Option<TypeId>> {
        self.args.iter().map(|arg| arg.ty.as_ref().map_or(None, |type_name| type_name.type_id())).collect()
    }
}

#[derive(Debug)]
pub struct TypeName<'a> {
    pub path    : Path<'a>,
    pub type_id : Option<TypeId>,
}

impl<'a> TypeName<'a> {
    /// Returns a type with the given name and an unresolved type-id.
    pub fn from_path(path: Path<'a>) -> Self {
        TypeName {
            path    : path,
            type_id : None,
        }
    }
    pub fn from_str(name: &'a str, position: u32) -> Self {
        TypeName {
            path    : Path { name: vec! [ name ], position: position },
            type_id : None,
        }
    }
}

impl<'a> Positioned for TypeName<'a> {
    fn position(self: &Self) -> u32 {
        self.path.position
    }
}

#[derive(Debug)]
pub enum InlineType<'a> {
    TypeName(TypeName<'a>),
    Array(Box<Array<'a>>),
}

impl<'a> InlineType<'a> {
    pub fn type_id(self: &Self) -> Option<TypeId> {
        match self {
            InlineType::TypeName(type_name) => type_name.type_id,
            InlineType::Array(array) => array.type_id,
        }
    }
}

#[derive(Debug)]
pub struct Array<'a> {
    pub position    : u32,
    pub element_type: InlineType<'a>,
    pub len         : u32,
    pub type_id     : Option<TypeId>,
}
impl_positioned!(Array);

#[derive(Debug)]
pub struct Struct<'a> {
    pub position: u32,
    pub ident   : Ident<'a>,
    pub fields  : Vec<(&'a str, InlineType<'a>)>,
    pub type_id : Option<TypeId>,
}
impl_positioned!(Struct);

#[derive(Debug)]
pub struct ForLoop<'a> {
    pub position: u32,
    pub iter    : Binding<'a>,
    pub range   : Expression<'a>,
    pub block   : Block<'a>,
    pub scope_id: Option<ScopeId>,
}
impl_positioned!(ForLoop);

#[derive(Debug)]
pub struct WhileLoop<'a> {
    pub position: u32,
    pub expr    : Expression<'a>,
    pub block   : Block<'a>,
    pub scope_id: Option<ScopeId>,
}
impl_positioned!(WhileLoop);

#[derive(Debug)]
pub struct Return<'a> {
    pub position        : u32,
    pub expr            : Option<Expression<'a>>,
    pub fn_ret_type_id  : Option<TypeId>,
}
impl_positioned!(Return);

#[derive(Debug)]
pub struct IfBlock<'a> {
    pub position    : u32,
    pub cond        : Expression<'a>,
    pub if_block    : Block<'a>,
    pub else_block  : Option<Block<'a>>,
    pub scope_id    : Option<ScopeId>,
}
impl_positioned!(IfBlock);

impl<'a> Returns for IfBlock<'a> {
    fn returns(self: &Self) -> bool {
        if self.cond.returns() {
            true
        } else if let Some(else_block) = &self.else_block {
            self.if_block.returns() && else_block.returns()
        } else {
            false
        }
    }
}

impl<'a> Bindable for IfBlock<'a> {
    fn binding_id_mut(self: &mut Self) -> &mut Option<BindingId> {
        if let Some(result) = &mut self.if_block.result {
            result.binding_id_mut()
        } else {
            panic!("attempted to set return type of if statement")
        }
    }
    fn binding_id(self: &Self) -> Option<BindingId> {
        self.if_block.result.as_ref().map_or(None, |e| e.binding_id())
    }
}

#[derive(Debug)]
pub struct Block<'a> {
    pub position    : u32,
    pub statements  : Vec<Statement<'a>>,
    pub result      : Option<Expression<'a>>,
    pub scope_id    : Option<ScopeId>,
    pub explicit_return: bool,
}
impl_positioned!(Block);

impl<'a> Returns for Block<'a> {
    fn returns(self: &Self) -> bool {
        self.explicit_return
    }
}

impl<'a> Bindable for Block<'a> {
    fn binding_id_mut(self: &mut Self) -> &mut Option<BindingId> {
        if let Some(result) = &mut self.result {
            result.binding_id_mut()
        } else {
            panic!("attempted to set return binding of block statement (not an expression)")
        }
    }
    fn binding_id(self: &Self) -> Option<BindingId> {
        self.result.as_ref().map_or(None, |e| e.binding_id())
    }
}

pub enum Expression<'a> {
    Literal(Literal<'a>),
    Variable(Variable<'a>),
    Call(Call<'a>),
    Member(Member<'a>),
    Assignment(Box<Assignment<'a>>),
    BinaryOp(Box<BinaryOp<'a>>),
    UnaryOp(Box<UnaryOp<'a>>),
    Cast(Box<Cast<'a>>),
    Block(Box<Block<'a>>),
    IfBlock(Box<IfBlock<'a>>),
}

impl<'a> Returns for Expression<'a> {
    fn returns(self: &Self) -> bool {
        match self {
            Expression::Assignment(v)   => v.returns(),
            Expression::BinaryOp(v)     => v.returns(),
            Expression::UnaryOp(v)      => v.returns(),
            Expression::Cast(v)         => v.returns(),
            Expression::Block(v)        => v.returns(),
            Expression::IfBlock(v)      => v.returns(),
            _                           => false,
        }
    }
}

impl<'a> Expression<'a> {
    pub fn is_literal(self: &Self) -> bool {
        match self {
            Expression::Literal(_) => true,
            _ => false,
        }
    }
    pub fn is_variable(self: &Self) -> bool {
        match self {
            Expression::Variable(_) => true,
            _ => false,
        }
    }
    pub fn is_call(self: &Self) -> bool {
        match self {
            Expression::Call(_) => true,
            _ => false,
        }
    }
    pub fn as_literal(self: &Self) -> Option<&Literal<'a>> {
        match self {
            Expression::Literal(literal) => Some(literal),
            _ => None,
        }
    }
    pub fn as_binary_op(self: &Self) -> Option<&BinaryOp<'a>> {
        match self {
            Expression::BinaryOp(binary_op) => Some(binary_op),
            _ => None,
        }
    }
    pub fn as_member(self: &Self) -> Option<&Member<'a>> {
        match self {
            Expression::Member(member) => Some(member),
            _ => None,
        }
    }
    pub fn as_member_mut(self: &mut Self) -> Option<&mut Member<'a>> {
        match self {
            Expression::Member(member) => Some(member),
            _ => None,
        }
    }
}

impl<'a> Bindable for Expression<'a> {
    fn binding_id_mut(self: &mut Self) -> &mut Option<BindingId> {
        match self {
            Expression::Literal(literal)        => literal.binding_id_mut(),
            Expression::Variable(variable)      => variable.binding_id_mut(),
            Expression::Call(call)              => call.binding_id_mut(),
            Expression::Member(member)          => member.binding_id_mut(),
            Expression::Assignment(assignment)  => assignment.binding_id_mut(),
            Expression::BinaryOp(binary_op)     => binary_op.binding_id_mut(),
            Expression::UnaryOp(unary_op)       => unary_op.binding_id_mut(),
            Expression::Cast(cast)              => cast.binding_id_mut(),
            Expression::Block(block)            => block.binding_id_mut(),
            Expression::IfBlock(if_block)       => if_block.binding_id_mut(),
        }
    }
    fn binding_id(self: &Self) -> Option<BindingId> {
        match self {
            Expression::Literal(literal)        => literal.binding_id(),
            Expression::Variable(variable)      => variable.binding_id(),
            Expression::Call(call)              => call.binding_id(),
            Expression::Member(member)          => member.binding_id(),
            Expression::Assignment(assignment)  => assignment.binding_id(),
            Expression::BinaryOp(binary_op)     => binary_op.binding_id(),
            Expression::UnaryOp(unary_op)       => unary_op.binding_id(),
            Expression::Cast(cast)              => cast.binding_id(),
            Expression::Block(block)            => block.binding_id(),
            Expression::IfBlock(if_block)       => if_block.binding_id(),
        }
    }
}

impl<'a> Positioned for Expression<'a> {
    fn position(self: &Self) -> u32 {
        match self {
            Expression::Literal(literal)        => literal.position(),
            Expression::Variable(variable)      => variable.position(),
            Expression::Call(call)              => call.position(),
            Expression::Member(member)          => member.position(),
            Expression::Assignment(assignment)  => assignment.position(),
            Expression::BinaryOp(binary_op)     => binary_op.position(),
            Expression::UnaryOp(unary_op)       => unary_op.position(),
            Expression::Cast(cast)              => cast.position(),
            Expression::Block(block)            => block.position(),
            Expression::IfBlock(if_block)       => if_block.position(),
        }
    }
}

impl<'a> Debug for Expression<'a> {
    fn fmt(self: &Self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Expression::Literal(literal)        => write!(f, "{:#?}", literal),
            Expression::Variable(variable)      => write!(f, "{:#?}", variable),
            Expression::Call(call)              => write!(f, "{:#?}", call),
            Expression::Member(member)          => write!(f, "{:#?}", member),
            Expression::Assignment(assignment)  => write!(f, "{:#?}", assignment),
            Expression::BinaryOp(binary_op)     => write!(f, "{:#?}", binary_op),
            Expression::UnaryOp(unary_op)       => write!(f, "{:#?}", unary_op),
            Expression::Cast(cast)              => write!(f, "{:#?}", cast),
            Expression::Block(block)            => write!(f, "{:#?}", block),
            Expression::IfBlock(if_block)       => write!(f, "{:#?}", if_block),
        }
    }
}

#[derive(Debug)]
pub struct Literal<'a> {
    pub position    : u32,
    pub value       : LiteralValue<'a>,
    pub type_name   : Option<TypeName<'a>>, // used in e.g. 1i8, 3.1415f32
    pub binding_id  : Option<BindingId>,
    pub heap_ref    : Cell<Option<HeapRef>>,
}
impl_bindable!(Literal);
impl_positioned!(Literal);

pub enum LiteralValue<'a> {
    Bool(bool),
    Numeric(Numeric),
    String(&'a str),
    Array(ArrayLiteral<'a>),
    Struct(StructLiteral<'a>),
}

impl<'a> LiteralValue<'a> {
    pub fn as_string(self: &Self) -> Option<&'a str> {
        match self {
            LiteralValue::String(v) => Some(v),
            _ => None,
        }
    }
    pub fn as_numeric(self: &Self) -> Option<Numeric> {
        match self {
            LiteralValue::Numeric(v) => Some(*v),
            _ => None,
        }
    }
    pub fn as_bool(self: &Self) -> Option<bool> {
        match self {
            LiteralValue::Bool(v) => Some(*v),
            _ => None,
        }
    }
    pub fn as_array(self: &Self) -> Option<&ArrayLiteral> {
        match self {
            LiteralValue::Array(v) => Some(v),
            _ => None,
        }
    }
    pub fn as_array_mut(self: &mut Self) -> Option<&mut ArrayLiteral<'a>> {
        match self {
            LiteralValue::Array(v) => Some(v),
            _ => None,
        }
    }
    pub fn as_struct_mut(self: &mut Self) -> Option<&mut StructLiteral<'a>> {
        match self {
            LiteralValue::Struct(v) => Some(v),
            _ => None,
        }
    }
}

impl<'a> Debug for LiteralValue<'a> {
    fn fmt(self: &Self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            LiteralValue::Bool(v) => write!(f, "{:?}", v),
            LiteralValue::Numeric(v) => write!(f, "{:?}", v),
            LiteralValue::String(v) => write!(f, "String({:?})", v),
            LiteralValue::Array(v) => write!(f, "Array({:#?})", v),
            LiteralValue::Struct(v) => write!(f, "Struct({:#?})", v),
        }
    }
}

#[derive(Debug)]
pub struct ArrayLiteral<'a> {
    pub elements: Vec<Literal<'a>>, // todo: eventually need to support expressions here
}

#[derive(Debug)]
pub struct StructLiteral<'a> {
    pub fields: HashMap<&'a str, Literal<'a>>, // todo: eventually need to support expressions here
}

#[derive(Debug)]
pub struct Variable<'a> {
    pub position    : u32,
    pub ident       : Ident<'a>,
    pub binding_id  : Option<BindingId>,
}
impl_bindable!(Variable);
impl_positioned!(Variable);

#[derive(Debug)]
pub struct Member<'a> {
    pub position    : u32,
    pub ident       : Ident<'a>,
    pub binding_id  : Option<BindingId>,
    pub index       : Option<u32>,
}
impl_bindable!(Member);
impl_positioned!(Member);

#[derive(Debug)]
pub enum CallType<'a> {
    Function,
    Method(Box<Expression<'a>>), // todo: maybe box call in expression instead?
    Static(Path<'a>),
}

#[derive(Debug)]
pub struct Call<'a> {
    pub position        : u32,
    pub ident           : Ident<'a>,
    pub args            : Vec<Expression<'a>>,
    pub call_type       : CallType<'a>,
    pub call_kind       : FnKind,
    pub function_id     : Option<FunctionId>,
    pub binding_id      : Option<BindingId>,
}
impl_bindable!(Call);
impl_positioned!(Call);

#[derive(Debug)]
pub struct Assignment<'a> {
    pub position: u32,
    pub op      : BinaryOperator,
    pub left    : Expression<'a>,
    pub right   : Expression<'a>,
    pub binding_id: Option<BindingId>,
}
impl_bindable!(Assignment);
impl_positioned!(Assignment);

impl<'a> Returns for Assignment<'a> {
    fn returns(self: &Self) -> bool {
        self.left.returns() || self.right.returns()
    }
}

#[derive(Debug)]
pub struct Cast<'a> {
    pub position    : u32,
    pub expr        : Expression<'a>,
    pub ty          : TypeName<'a>,
    pub binding_id  : Option<BindingId>,
}
impl_bindable!(Cast);
impl_positioned!(Cast);

impl<'a> Returns for Cast<'a> {
    fn returns(self: &Self) -> bool {
        self.expr.returns()
    }
}

#[derive(Debug)]
pub struct BinaryOp<'a> {
    pub position    : u32,
    pub op          : BinaryOperator,
    pub left        : Expression<'a>,
    pub right       : Expression<'a>,
    pub binding_id  : Option<BindingId>,
}
impl_bindable!(BinaryOp);
impl_positioned!(BinaryOp);

impl<'a> Returns for BinaryOp<'a> {
    fn returns(self: &Self) -> bool {
        self.left.returns() || self.right.returns()
    }
}

#[derive(Debug)]
pub struct UnaryOp<'a> {
    pub position    : u32,
    pub op          : UnaryOperator,
    pub expr        : Expression<'a>,
    pub binding_id  : Option<BindingId>,
}
impl_bindable!(UnaryOp);
impl_positioned!(UnaryOp);

impl<'a> Returns for UnaryOp<'a> {
    fn returns(self: &Self) -> bool {
        self.expr.returns()
    }
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum UnaryOperator {
    // boolean
    Not,
    // inc/dec
    IncBefore, DecBefore,
    IncAfter, DecAfter,
}

impl UnaryOperator {
    pub fn prefix_from_string(op: &str) -> Self {
        match op {
            "!" => UnaryOperator::Not,
            "++" => UnaryOperator::IncBefore,
            "--" => UnaryOperator::DecBefore,
            _ => panic!("parser yielded invalid prefix operator \"{}\"", op),
        }
    }
    pub fn suffix_from_string(op: &str) -> Self {
        match op {
            "++" => UnaryOperator::IncAfter,
            "--" => UnaryOperator::DecAfter,
            _ => panic!("parser yielded invalid prefix operator \"{}\"", op),
        }
    }
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum BinaryOperator {
    // arithmetic
    Add, Sub, Mul, Div, Rem,
    // assigments
    Assign, AddAssign, SubAssign, MulAssign, DivAssign, RemAssign,
    // comparison
    Less, Greater, LessOrEq, GreaterOrEq, Equal, NotEqual,
    // boolean
    And, Or,
    // iterator
    Range, RangeInclusive,
    // data offsets
    Index, IndexWrite, Access, AccessWrite,
}

impl BinaryOperator {
    pub fn from_string(op: &str) -> Self {
        match op {

            "=" => BinaryOperator::Assign,
            "+" => BinaryOperator::Add,
            "-" => BinaryOperator::Sub,
            "*" => BinaryOperator::Mul,
            "/" => BinaryOperator::Div,
            "%" => BinaryOperator::Rem,

            "&&" => BinaryOperator::And,
            "||" => BinaryOperator::Or,

            "<" => BinaryOperator::Less,
            ">" => BinaryOperator::Greater,
            "<=" => BinaryOperator::LessOrEq,
            ">=" => BinaryOperator::GreaterOrEq,
            "==" => BinaryOperator::Equal,
            "!=" => BinaryOperator::NotEqual,

            "+=" => BinaryOperator::AddAssign,
            "-=" => BinaryOperator::SubAssign,
            "*=" => BinaryOperator::MulAssign,
            "/=" => BinaryOperator::DivAssign,
            "%=" => BinaryOperator::RemAssign,

            ".." => BinaryOperator::Range,
            "..=" => BinaryOperator::RangeInclusive,
            "." => BinaryOperator::Access,

            _ => panic!(format!("parser yielded invalid binary operator \"{}\"", op)),
        }
    }
}